"use strict";
var myCanvas = document.querySelector('#qipan');
var btnhui = document.querySelector('.btnhui');
var btnche = document.querySelector('.btnche');
var btncz = document.querySelector('.btncz');
var cheqi = false;
var huiqi = false;
var size = 25;
var sizeNumber = 21;
var r = 10;
var weizi = [0, 0];
var qiziColor = 1;
var qiziColorData = new Array(sizeNumber);
for (var i = 0; i < sizeNumber; i++) {
    qiziColorData[i] = new Array(sizeNumber);
}
for (var n = 0; n < sizeNumber; n++) {
    for (var m = 0; m < sizeNumber; m++) {
        qiziColorData[n][m] = 3;
    }
}
var ctx = myCanvas.getContext('2d');
function qipan() {
    for (var i = 0; i < sizeNumber; i++) {
        ctx.beginPath();
        ctx.moveTo(0, size * i);
        ctx.lineTo(500, size * i);
        ctx.moveTo(size * i, 0);
        ctx.lineTo(size * i, 500);
        ctx.stroke();
        ctx.closePath();
    }
}
qipan();
function qizi(row, col, color) {
    ctx.beginPath();
    ctx.arc(row, col, r, 0, 2 * Math.PI);
    ctx.fillStyle = color;
    ctx.fill();
    ctx.closePath();
}
myCanvas.onclick = function (e) {
    var x = e.clientX - myCanvas.offsetLeft;
    var y = e.clientY - myCanvas.offsetTop;
    var i = Math.round(x / size);
    var j = Math.round(y / size);
    weizi = [i, j];
    if (qiziColorData[i][j] == 3) {
        if (qiziColor) {
            qizi(i * size, j * size, 'red');
            qiziColor = 0;
            qiziColorData[i][j] = 1;
        }
        else {
            qizi(i * size, j * size, 'black');
            qiziColor = 1;
            qiziColorData[i][j] = 0;
        }
    }
    judge(i, j);
    cheqi = false;
    huiqi = true;
};
btnhui.onclick = function () {
    if (huiqi == true) {
        ctx.clearRect(weizi[0] * size - r, weizi[1] * size - r, size, size);
        ctx.beginPath();
        ctx.moveTo((weizi[0] - 1) * size, weizi[1] * size);
        ctx.lineTo((weizi[0] + 1) * size, weizi[1] * size);
        ctx.moveTo(weizi[0] * size, (weizi[1] - 1) * size);
        ctx.lineTo(weizi[0] * size, (weizi[1] + 1) * size);
        ctx.stroke();
        ctx.closePath;
        qiziColor = qiziColor == 1 ? 0 : 1;
        cheqi = true;
        qiziColorData[weizi[0]][weizi[1]] = 3;
    }
};
btnche.onclick = function () {
    if (cheqi == true) {
        ctx.beginPath();
        ctx.arc(weizi[0] * size, weizi[1] * size, r, 0, 2 * Math.PI);
        if (qiziColor == 1) {
            ctx.fillStyle = 'red';
        }
        else {
            ctx.fillStyle = 'black';
        }
        ctx.fill();
        ctx.closePath();
        qiziColorData[weizi[0]][weizi[1]] = qiziColor;
        qiziColor = qiziColor == 1 ? 0 : 1;
        cheqi = false;
    }
};
btncz.onclick = function () {
    ctx.clearRect(0, 0, 500, 500);
    qipan();
};
function judge(row, col) {
    var directionData = [
        [-1, 0], [1, 0],
        [0, -1], [0, 1],
        [-1, 1], [1, -1],
        [-1, -1], [1, 1]
    ];
    var _loop_1 = function (i) {
        var _a;
        var color = qiziColorData[row][col];
        var nextX = 0, nextY = 0, offsetX = 0, offsetY = 0;
        var count = 1;
        if (i % 2 == 0) {
            count = 1;
        }
        _a = directionData.pop(), offsetX = _a[0], offsetY = _a[1];
        nextX = row;
        nextY = col;
        while (nextX + offsetX >= 0 && nextX + offsetX < 21 &&
            nextY + offsetY >= 0 && nextY + offsetY < 21 &&
            qiziColorData[nextX += offsetX][nextY += offsetY] == color) {
            count++;
        }
        if (count >= 5) {
            setTimeout(function () { return alert("\u606D\u559C" + '黑红'[color] + "\u8272\u68CB\u5B50\u83B7\u80DC!"); });
            return "break";
        }
    };
    for (var i = 0; i < 8; i++) {
        var state_1 = _loop_1(i);
        if (state_1 === "break")
            break;
    }
}
//# sourceMappingURL=data:application/json;base64,