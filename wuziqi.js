"use strict";
var myCanvas = document.querySelector('#qipan');
var btnhui = document.querySelector('.btnhui');
var btnche = document.querySelector('.btnche');
var btncz = document.querySelector('.btncz');
var cheqi = false;
var huiqi = false;
var size = 25, sizeNumber = 21;
var r = 10;
var weizi = [0, 0];
var qiziColor = 1;
var qiziColorData = new Array(sizeNumber);
for (var i = 0; i < sizeNumber; i++) {
    qiziColorData[i] = new Array(sizeNumber);
}
for (var n = 0; n < sizeNumber; n++) {
    for (var m = 0; m < sizeNumber; m++) {
        qiziColorData[n][m] = 3;
    }
}
var ctx = myCanvas.getContext('2d');
function qipan() {
    for (i = 0; i < sizeNumber; i++) {
        ctx.beginPath();
        ctx.moveTo(0, size * i);
        ctx.lineTo(500, size * i);
        ctx.moveTo(size * i, 0);
        ctx.lineTo(size * i, 500);
        ctx.stroke();
        ctx.closePath();
    }
}
qipan();
function qizi(row, col, color) {
    ctx.beginPath();
    ctx.arc(row, col, r, 0, 2 * Math.PI);
    ctx.fillStyle = color;
    ctx.fill();
    ctx.closePath();
}
myCanvas.onclick = function (e) {
    var x = e.clientX - myCanvas.offsetLeft;
    var y = e.clientY - myCanvas.offsetTop;
    var i = Math.round(x / size);
    var j = Math.round(y / size);
    weizi = [i, j];
    if (qiziColorData[i][j] == 3) {
        if (qiziColor) {
            qizi(i * size, j * size, 'red');
            qiziColor = 0;
            qiziColorData[i][j] = 1;
        }
        else {
            qizi(i * size, j * size, 'black');
            qiziColor = 1;
            qiziColorData[i][j] = 0;
        }
    }
    judge(i, j);
    cheqi = false;
    huiqi = true;
};
btnhui.onclick = function () {
    if (huiqi == true) {
        ctx.clearRect(weizi[0] * size - r, weizi[1] * size - r, size, size);
        ctx.beginPath();
        ctx.moveTo((weizi[0] - 1) * size, weizi[1] * size);
        ctx.lineTo((weizi[0] + 1) * size, weizi[1] * size);
        ctx.moveTo(weizi[0] * size, (weizi[1] - 1) * size);
        ctx.lineTo(weizi[0] * size, (weizi[1] + 1) * size);
        ctx.stroke();
        ctx.closePath;
        qiziColor = qiziColor == 1 ? 0 : 1;
        cheqi = true;
        qiziColorData[weizi[0]][weizi[1]] = 3;
    }
};
btnche.onclick = function () {
    if (cheqi == true) {
        ctx.beginPath();
        ctx.arc(weizi[0] * size, weizi[1] * size, r, 0, 2 * Math.PI);
        if (qiziColor == 1) {
            ctx.fillStyle = 'red';
        }
        else {
            ctx.fillStyle = 'black';
        }
        ctx.fill();
        ctx.closePath();
        qiziColorData[weizi[0]][weizi[1]] = qiziColor;
        qiziColor = qiziColor == 1 ? 0 : 1;
        cheqi = false;
    }
};
btncz.onclick = function () {
    ctx.clearRect(0, 0, 500, 500);
    qipan();
};
function judge(row, col) {
    var directionData = [
        [-1, 0], [1, 0],
        [0, -1], [0, 1],
        [-1, 1], [1, -1],
        [-1, -1], [1, 1]
    ];
    var _loop_1 = function (i_1) {
        var _a;
        var color = qiziColorData[row][col];
        var nextX = 0, nextY = 0, offsetX = 0, offsetY = 0;
        var count = 1;
        if (i_1 % 2 == 0) {
            count = 1;
        }
        _a = directionData.pop(), offsetX = _a[0], offsetY = _a[1];
        nextX = row;
        nextY = col;
        while (nextX + offsetX >= 0 && nextX + offsetX < 21 &&
            nextY + offsetY >= 0 && nextY + offsetY < 21 &&
            qiziColorData[nextX += offsetX][nextY += offsetY] == color) {
            count++;
        }
        if (count >= 5) {
            setTimeout(function () { return alert("\u606D\u559C" + '黑红'[color] + "\u8272\u68CB\u5B50\u83B7\u80DC!"); });
            return "break";
        }
    };
    for (var i_1 = 0; i_1 < 8; i_1++) {
        var state_1 = _loop_1(i_1);
        if (state_1 === "break")
            break;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3V6aXFpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid3V6aXFpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBc0IsQ0FBQztBQUVyRSxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBbUIsQ0FBQztBQUVqRSxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBbUIsQ0FBQztBQUVqRSxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBbUIsQ0FBQztBQUUvRCxJQUFJLEtBQUssR0FBWSxLQUFLLENBQUU7QUFFNUIsSUFBSSxLQUFLLEdBQVksS0FBSyxDQUFFO0FBRTVCLElBQUksSUFBSSxHQUFXLEVBQUUsRUFBRSxVQUFVLEdBQVcsRUFBRSxDQUFDO0FBRS9DLElBQUksQ0FBQyxHQUFXLEVBQUUsQ0FBQztBQUVuQixJQUFJLEtBQUssR0FBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUk3QixJQUFJLFNBQVMsR0FBUyxDQUFDLENBQUM7QUFFeEIsSUFBSSxhQUFhLEdBQWEsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNqQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDNUM7QUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsYUFBYSxDQUFDLENBQUMs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TCxLQUFLLElBQUksR0FBQyxHQUFHLENBQUMsRUFBRSxHQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUMsRUFBRTs4QkFBakIsR0FBQzs7O0tBbUJUO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKueUu+W4gyAqL1xyXG52YXIgbXlDYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcWlwYW4nKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuLyoq5oKU5qOL5oyJ6ZKuICovXHJcbnZhciBidG5odWkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuaHVpJykgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbi8qKuaSpOmUgOaMiemSriAqL1xyXG52YXIgYnRuY2hlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ0bmNoZScpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4vKirph43nva7mjInpkq4gKi9cclxudmFyIGJ0bmN6ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ0bmN6JykgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbi8qKuaSpOaji+eKtuaAge+8myAqL1xyXG52YXIgY2hlcWk6IGJvb2xlYW4gPSBmYWxzZSA7XHJcbi8qKuaClOaji+eKtuaAge+8myAqL1xyXG52YXIgaHVpcWk6IGJvb2xlYW4gPSBmYWxzZSA7XHJcbi8qKuagvOWtkOeahOWwuuWvuOeahOaVsOmHjyAqL1xyXG52YXIgc2l6ZTogbnVtYmVyID0gMjUsIHNpemVOdW1iZXI6IG51bWJlciA9IDIxO1xyXG4vKirlnIbnmoTljYrlvoQgKi9cclxudmFyIHI6IG51bWJlciA9IDEwO1xyXG4vKirmnIDlkI7kuIDmraXnmoTkvY3nva7kv6Hmga8gKi9cclxudmFyIHdlaXppOiBudW1iZXJbXSA9IFswLCAwXTtcclxuLyoq5qOL5a2Q6aKc6Imy57G75Z6LICovXHJcbnR5cGUgUGF3biA9IDB8MXwzOyBcclxuLyoq5LiL5qOL6aKc6Imy77yMMeaYr+e6ouiJsu+8jDDmmK/pu5HoibLvvJsgKi9cclxudmFyIHFpemlDb2xvcjogUGF3biA9IDE7XHJcbi8qKuaji+ebmOS4iuS9jee9rueahOminOiJsuS/oeaBryAqL1xyXG52YXIgcWl6aUNvbG9yRGF0YTogUGF3bltdW10gPSBuZXcgQXJyYXkoc2l6ZU51bWJlcik7XHJcbmZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZU51bWJlcjsgaSsrKSB7XHJcbiAgICBxaXppQ29sb3JEYXRhW2ldID0gbmV3IEFycmF5KHNpemVOdW1iZXIpO1xyXG59XHJcbmZvciAodmFyIG4gPSAwOyBuIDwgc2l6ZU51bWJlcjsgbisrKSB7XHJcbiAgICBmb3IgKHZhciBtID0gMDsgbSA8IHNpemVOdW1iZXI7IG0rKykge1xyXG4gICAgICAgIHFpemlDb2xvckRhdGFbbl1bbV0gPSAzO1xyXG4gICAgfVxyXG59XHJcbnZhciBjdHggPSBteUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuLyoqXHJcbiAqIOe7mOWItuaji+ebmFxyXG4gKi9cclxuZnVuY3Rpb24gcWlwYW4oKTogdm9pZCB7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2l6ZU51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oMCwgc2l6ZSAqIGkpO1xyXG4gICAgICAgIGN0eC5saW5lVG8oNTAwLCBzaXplICogaSk7XHJcbiAgICAgICAgY3R4Lm1vdmVUbyhzaXplICogaSwgMCk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhzaXplICogaSwgNTAwKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG59XHJcbnFpcGFuKCk7XHJcbi8qKlxyXG4gKue7mOWItuaji+WtkFxyXG4gKiBAcGFyYW0gcm93IHjovbTlnZDmoIdcclxuICogQHBhcmFtIGNvbCB56L205Z2Q5qCHXHJcbiAqIEBwYXJhbSBjb2xvciDmo4vlrZDpopzoibIgXHJcbiAqL1xyXG5mdW5jdGlvbiBxaXppKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgY29sb3I6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmFyYyhyb3csIGNvbCwgciwgMCwgMiAqIE1hdGguUEkpXHJcbiAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG59XHJcbi8qKlxyXG4gKiDkuIvmo4tcclxuICogQHBhcmFtIGUg5LqL5Lu2XHJcbiAqL1xyXG5teUNhbnZhcy5vbmNsaWNrID0gZnVuY3Rpb24gKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIHZhciB4OiBudW1iZXIgPSBlLmNsaWVudFggLSBteUNhbnZhcy5vZmZzZXRMZWZ0O1xyXG4gICAgdmFyIHk6IG51bWJlciA9IGUuY2xpZW50WSAtIG15Q2FudmFzLm9mZnNldFRvcDtcclxuICAgIHZhciBpOiBudW1iZXIgPSBNYXRoLnJvdW5kKHggLyBzaXplKTtcclxuICAgIHZhciBqOiBudW1iZXIgPSBNYXRoLnJvdW5kKHkgLyBzaXplKTtcclxuICAgIHdlaXppID0gW2ksIGpdO1xyXG4gICAgaWYgKHFpemlDb2xvckRhdGFbaV1bal0gPT0gMykge1xyXG4gICAgICAgIGlmIChxaXppQ29sb3IpIHtcclxuICAgICAgICAgICAgcWl6aShpICogc2l6ZSwgaiAqIHNpemUsICdyZWQnKTtcclxuICAgICAgICAgICAgcWl6aUNvbG9yID0gMDtcclxuICAgICAgICAgICAgcWl6aUNvbG9yRGF0YVtpXVtqXSA9IDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcWl6aShpICogc2l6ZSwgaiAqIHNpemUsICdibGFjaycpO1xyXG4gICAgICAgICAgICBxaXppQ29sb3IgPSAxO1xyXG4gICAgICAgICAgICBxaXppQ29sb3JEYXRhW2ldW2pdID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBqdWRnZShpLCBqKSAvL+WIpOaWrei+k+i1olxyXG4gICAgY2hlcWkgPSBmYWxzZTtcclxuICAgIGh1aXFpID0gdHJ1ZTtcclxufVxyXG4vKipcclxuICog5oKU5qOLXHJcbiAqL1xyXG5idG5odWkub25jbGljayA9IGZ1bmN0aW9uICgpOiB2b2lkIHtcclxuICAgIGlmIChodWlxaSA9PSB0cnVlKSB7XHJcbiAgICAgICAgY3R4LmNsZWFyUmVjdCh3ZWl6aVswXSAqIHNpemUgLSByLCB3ZWl6aVsxXSAqIHNpemUgLSByLCBzaXplLCBzaXplKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgICAgIGN0eC5tb3ZlVG8oKHdlaXppWzBdIC0gMSkgKiBzaXplLCB3ZWl6aVsxXSAqIHNpemUpXHJcbiAgICAgICAgY3R4LmxpbmVUbygod2VpemlbMF0gKyAxKSAqIHNpemUsIHdlaXppWzFdICogc2l6ZSlcclxuXHJcbiAgICAgICAgY3R4Lm1vdmVUbyh3ZWl6aVswXSAqIHNpemUsICh3ZWl6aVsxXSAtIDEpICogc2l6ZSlcclxuICAgICAgICBjdHgubGluZVRvKHdlaXppWzBdICogc2l6ZSwgKHdlaXppWzFdICsgMSkgKiBzaXplKVxyXG5cclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aDtcclxuICAgICAgICBxaXppQ29sb3IgPSBxaXppQ29sb3IgPT0gMSA/IDAgOiAxO1xyXG4gICAgICAgIGNoZXFpID0gdHJ1ZTtcclxuICAgICAgICBxaXppQ29sb3JEYXRhW3dlaXppWzBdXVt3ZWl6aVsxXV0gPSAzO1xyXG4gICAgfVxyXG5cclxufVxyXG4vKipcclxuICog5pKk6ZSA5oKU5qOLXHJcbiAqL1xyXG5idG5jaGUub25jbGljayA9IGZ1bmN0aW9uICgpOiB2b2lkIHtcclxuICAgIGlmIChjaGVxaSA9PSB0cnVlKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMod2VpemlbMF0gKiBzaXplLCB3ZWl6aVsxXSAqIHNpemUsIHIsIDAsIDIgKiBNYXRoLlBJKVxyXG4gICAgICAgIGlmIChxaXppQ29sb3IgPT0gMSkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JlZCc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIHFpemlDb2xvckRhdGFbd2VpemlbMF1dW3dlaXppWzFdXSA9IHFpemlDb2xvcjtcclxuICAgICAgICBxaXppQ29sb3IgPSBxaXppQ29sb3IgPT0gMSA/IDAgOiAxXHJcbiAgICAgICAgY2hlcWkgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5idG5jei5vbmNsaWNrID0gZnVuY3Rpb24gKCk6IHZvaWQge1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCA1MDAsIDUwMCk7XHJcbiAgICBxaXBhbigpO1xyXG59XHJcbi8qKlxyXG4gKiDovpPotaLnmoTpgLvovpFcclxuICogQHBhcmFtIHJvdyB46L20IFxyXG4gKiBAcGFyYW0gY29sIHnovbQgXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24ganVkZ2Uocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBkaXJlY3Rpb25EYXRhOiBBcnJheTxhbnk+ID0gW1xyXG4gICAgICAgIFstMSwgMF0sIFsxLCAwXSwvL3jovbRcclxuICAgICAgICBbMCwgLTFdLCBbMCwgMV0sLy956L20XHJcbiAgICAgICAgWy0xLCAxXSwgWzEsIC0xXSwvL+W3puS4iuWIsOWPs+S4i1xyXG4gICAgICAgIFstMSwgLTFdLCBbMSwgMV0vL+W3puS4i+WIsOWPs+S4ilxyXG4gICAgXVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICBsZXQgY29sb3IgPSBxaXppQ29sb3JEYXRhW3Jvd11bY29sXTtcclxuICAgICAgICBsZXQgbmV4dFggPSAwLCBuZXh0WSA9IDAsIG9mZnNldFggPSAwLCBvZmZzZXRZID0gMDtcclxuICAgICAgICBsZXQgY291bnQgPSAxO1xyXG4gICAgICAgIGlmIChpICUgMiA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvdW50ID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgW29mZnNldFgsIG9mZnNldFldID0gZGlyZWN0aW9uRGF0YS5wb3AoKTtcclxuICAgICAgICBuZXh0WCA9IHJvdztcclxuICAgICAgICBuZXh0WSA9IGNvbDtcclxuICAgICAgICB3aGlsZSAobmV4dFggKyBvZmZzZXRYID49IDAgJiYgbmV4dFggKyBvZmZzZXRYIDwgMjEgJiZcclxuICAgICAgICAgICAgbmV4dFkgKyBvZmZzZXRZID49IDAgJiYgbmV4dFkgKyBvZmZzZXRZIDwgMjEgJiZcclxuICAgICAgICAgICAgcWl6aUNvbG9yRGF0YVtuZXh0WCArPSBvZmZzZXRYXVtuZXh0WSArPSBvZmZzZXRZXSA9PSBjb2xvcikge1xyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY291bnQgPj0gNSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGFsZXJ0KGDmga3llpwkeyfpu5HnuqInW2NvbG9yXX3oibLmo4vlrZDojrfog5whYCkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=